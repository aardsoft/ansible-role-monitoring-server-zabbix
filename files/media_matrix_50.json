{
  "zabbix_export": {
    "version": "5.0",
    "date": "2021-02-24T14:57:02Z",
    "media_types": [
      {
        "name": "Matrix",
        "type": "WEBHOOK",
        "description": "https://github.com/jooola/zabbix-matrix-webhook#readme\n",
        "parameters": [
          {
            "name": "server",
            "value": "<server>"
          },
          {
            "name": "token",
            "value": "<token>"
          },
          {
            "name": "room",
            "value": "{ALERT.SENDTO}"
          },
          {
            "name": "message",
            "value": "{ALERT.MESSAGE}"
          },
          {
            "name": "severity",
            "value": "{EVENT.NSEVERITY}"
          },
          {
            "name": "is_problem",
            "value": "{EVENT.VALUE}"
          },
          {
            "name": "is_update",
            "value": "{EVENT.UPDATE.STATUS}"
          },
          {
            "name": "enable_colors",
            "value": "true"
          }
        ],
        "message_templates": [
          {
            "event_source": "TRIGGERS",
            "operation_mode": "PROBLEM",
            "subject": "Problem: {EVENT.NAME}",
            "message": "Problem started at {EVENT.TIME} on {EVENT.DATE}\nProblem name: {EVENT.NAME}\nHost: {HOST.NAME}\nSeverity: {EVENT.SEVERITY}\nOperational data: {EVENT.OPDATA}\nOriginal problem ID: {EVENT.ID}\n{TRIGGER.URL}\n"
          },
          {
            "event_source": "TRIGGERS",
            "operation_mode": "RECOVERY",
            "subject": "Resolved in {EVENT.DURATION}: {EVENT.NAME}",
            "message": "Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}\nProblem name: {EVENT.NAME}\nProblem duration: {EVENT.DURATION}\nHost: {HOST.NAME}\nSeverity: {EVENT.SEVERITY}\nOriginal problem ID: {EVENT.ID}\n{TRIGGER.URL}\n"
          },
          {
            "event_source": "TRIGGERS",
            "operation_mode": "UPDATE",
            "subject": "Updated problem in {EVENT.AGE}: {EVENT.NAME}",
            "message": "{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}\n{EVENT.UPDATE.MESSAGE}\n\nCurrent problem status: {EVENT.STATUS}\nAge: {EVENT.AGE}\nAcknowledged: {EVENT.ACK.STATUS}\n"
          }
        ],
        "script": "const input = [\n  \"server\",\n  \"room\",\n  \"token\",\n\n  \"message\",\n  \"severity\",\n  \"is_problem\",\n  \"is_update\",\n\n  \"enable_colors\",\n]\n\nconst update_color = \"#000000\"\nconst recovery_color = \"#098e68\"\nconst severity_colors = [\n  \"#5a5a5a\", // Not classified\n  \"#2caed6\", // Information\n  \"#d6832c\", // Warning\n  \"#d6542c\", // Average\n  \"#d62c2c\", // High\n  \"#ff0000\", // Disaster\n]\n\nvar Matrix = {\n  validate: function (params) {\n    input.forEach(function (key) {\n      if (key in params && params[key] != undefined) {\n        Matrix[key] = params[key]\n      } else {\n        throw \"Missing value for key: \" + key\n      }\n    })\n\n    Matrix.severity = parseInt(Matrix.severity)\n    Matrix.is_problem = parseInt(Matrix.is_problem)\n    Matrix.is_update = parseInt(Matrix.is_update)\n    Matrix.enable_colors = Matrix.enable_colors.toLowerCase() == \"true\"\n\n    if (Matrix.is_problem == 1) {\n      if (Matrix.is_update == 0) {\n        Matrix.kind = \"problem\"\n        Matrix.color = severity_colors[Matrix.severity]\n      } else {\n        Matrix.kind = \"update\"\n        Matrix.color = update_color\n      }\n    } else {\n      Matrix.kind = \"recovery\"\n      Matrix.color = recovery_color\n    }\n\n    if (typeof params.HTTPProxy === \"string\" && params.HTTPProxy.trim() !== \"\") {\n      Matrix.http_proxy = params.HTTPProxy\n    }\n  },\n\n  request: function (path, payload) {\n    var request = new CurlHttpRequest()\n    request.AddHeader(\"Content-Type: application/json\")\n    request.AddHeader(\"Authorization: Bearer \" + Matrix.token)\n\n    var url = Matrix.server + path\n\n    Zabbix.Log(4, \"[Matrix Webhook] new request to: \" + url)\n\n    if (Matrix.http_proxy != undefined) {\n      request.setProxy(Matrix.http_proxy)\n    }\n\n    var blob = request.Post(url, JSON.stringify(payload))\n\n    if (request.Status() !== 200) {\n      var resp = JSON.parse(blob)\n\n      if (request.Status() == 403 && resp.error.indexOf(\"not in room\") !== -1) {\n        throw \"User is not in room\"\n      }\n\n      Zabbix.Log(4, \"[Matrix Webhook] Request failed: \" + resp.error)\n      throw \"Request failed: \" + request.Status() + \" \" + resp.error\n    }\n  },\n\n  joinRoom: function () {\n    Matrix.request(\"/_matrix/client/r0/rooms/\" + Matrix.room + \"/join\", {})\n  },\n\n  sendMessage: function () {\n    Matrix.message = Matrix.message.replace(/\\r/g, \"\")\n\n    var payload = {\n      body: Matrix.message,\n      msgtype: \"m.text\",\n    }\n\n    if (Matrix.enable_colors) {\n      Matrix.messageFormatted =\n        '<span data-mx-color=\"' +\n        Matrix.color +\n        '\">' +\n        Matrix.message.replace(/\\n/g, \"<br>\") +\n        \"</span>\"\n\n      payload = Object.assign(payload, {\n        format: \"org.matrix.custom.html\",\n        formatted_body: Matrix.messageFormatted,\n      })\n    }\n\n    Matrix.request(\"/_matrix/client/r0/rooms/\" + Matrix.room + \"/send/m.room.message\", payload)\n  },\n}\n\ntry {\n  var params = JSON.parse(value)\n\n  Matrix.validate(params)\n\n  try {\n    Matrix.sendMessage()\n  } catch (error) {\n    if (error == \"User is not in room\") {\n      Matrix.joinRoom()\n      Matrix.sendMessage()\n    } else {\n      throw error\n    }\n  }\n\n  return \"OK\"\n} catch (error) {\n  Zabbix.Log(4, \"[Matrix Webhook] Error: \" + error)\n  throw \"Sending failed: \" + error\n}\n"
      }
    ]
  }
}
