---
# tasks file for zabbix-server
#

- include: centos_legacy.yml
  when: >
    ansible_os_family == "RedHat" and
    ansible_distribution_major_version == '7'

- set_fact:
    role_packages:
      - zabbix-server-mysql
      - zabbix-web-mysql
      - zabbix-get
      - zabbix-sender
      - mariadb
  when: >
    ansible_os_family == "RedHat" and
    ansible_distribution_major_version == '7'

# TODO: make web frontend optional
- set_fact:
    zabbix_http_service: apache2
    zabbix_service: zabbix_server
    zabbix_datadir: /usr/share/zabbix
    zabbix_php_conf_dir: /usr/share/zabbix/conf
    zabbix_http_template: http_zabbix_suse.j2
    zabbix_http_user: wwwrun
    role_packages:
      - "{{zabbix_pkg_prefix}}-server-{{zabbix_backend}}"
      - apache2
      - apache2-mod_php7
      - mariadb-client
      - php7-mysql
      - php7-json
  when: >
    ansible_os_family == "Suse"

- set_fact:
    role_packages: "{{ role_packages }} + [ '{{zabbix_pkg_prefix}}-phpfrontend' ]"
  when: >
    ansible_os_family == "Suse" and
    zabbix_pkg_prefix != "zabbix50"

- set_fact:
    role_packages: "{{ role_packages }} + [ '{{zabbix_pkg_prefix}}-ui' ]"
    zabbix_php_conf_dir: /etc/zabbix/web
  when: >
    ansible_os_family == "Suse" and
    zabbix_pkg_prefix == "zabbix50"

- include_role:
    name: basic-host
    tasks_from: install_packages

- name: Check MySQL DB
  command: bash -c "mysql -uzabbix -p{{lookup(passdb, zabbix_server_db_pass)}} -h {{zabbix_server_db_host}} -e 'select * from users;' zabbix"
  register: result_mysql_check
  ignore_errors: True

# TODO: MySQL hostname could be dynamic from config
- name: setup MySQL DB (RedHat)
  command: bash -c "zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p{{lookup(passdb, zabbix_server_db_pass)}} -h {{zabbix_server_db_host}} zabbix"
  when: >
    result_mysql_check is failed and
    ansible_os_family == "RedHat"

- name: setup MySQL DB (Suse)
  command: bash -c "cat /usr/share/doc/packages/{{zabbix_pkg_prefix}}-server/mysql/{{_sql_file}} | mysql -uzabbix -p{{lookup(passdb, zabbix_server_db_pass)}} -h {{zabbix_server_db_host}} zabbix"
  loop_control:
    loop_var: _sql_file
  with_items:
    - schema.sql
    - images.sql
    - data.sql
  when: >
    zabbix_backend == "mysql" and
    result_mysql_check is failed and
    ansible_os_family == "Suse"

- name: Configure Zabbix Server
  template:
    src: zabbix_server.conf.j2
    dest: /etc/zabbix/zabbix_server.conf
    owner: root
    group: zabbixs
    mode: u=rw,g=r,o=
  notify:
    - restart zabbix

# TODO: only restart here if needed
- name: enable and start Zabbix Server
  service:
    name: "{{zabbix_service}}"
    enabled: yes
    state: restarted
    daemon_reload: yes

- name: create apache configuration
  template:
    src: "{{zabbix_http_template}}"
    dest: "/etc/{{zabbix_http_service}}/conf.d/zabbix.conf"
    mode: 0644
  notify:
    - restart httpd

- name: create PHP Zabbix configuration
  template:
    src: "zabbix.conf.php.j2"
    dest: "{{zabbix_php_conf_dir}}/zabbix.conf.php"
    mode: 0600
    owner: "{{zabbix_http_user}}"
  notify:
    - restart httpd

- name: enable php7 module
  apache2_module:
    state: present
    name: php7
  notify:
    - restart httpd

- name: enable zabbix in Apache
  shell: a2enflag zabbix
  register: _a2enflag_result
  changed_when: _a2enflag_result.stdout == ''
  notify:
    - restart httpd

- name: enable and start Apache Server
  service:
    name: "{{zabbix_http_service}}"
    enabled: yes
    state: started
    daemon_reload: yes

- name: Open the Firewalld port 80/tcp on Zabbix
  firewalld: service=http permanent=yes state=enabled immediate=yes zone=internal

- name: Open the Firewalld port 10050/tcp on Zabbix
  firewalld: port=10050/tcp permanent=yes state=enabled immediate=yes zone=internal

- name: Open the Firewalld port 10051/tcp on Zabbix
  firewalld: port=10051/tcp permanent=yes state=enabled immediate=yes zone=internal

- name: install default alert scripts
  copy:
    dest: "{{zabbix_datadir}}/alertscripts/{{_script.value.src|default(_script.key)}}"
    src: "{{_script.value.src|default(_script.key)}}"
    owner: root
    mode: 0755
  with_dict: "{{zabbix_default_alertscripts}}"
  loop_control:
    loop_var: _script

- name: install default external scripts
  copy:
    dest: "{{zabbix_datadir}}/externalscripts/{{_script.value.src|default(_script.key)}}"
    src: "{{_script.value.src|default(_script.key)}}"
    owner: root
    mode: 0755
  with_dict: "{{zabbix_default_externalscripts}}"
  loop_control:
    loop_var: _script

- name: create host groups
  become: no
  local_action:
    module: zabbix_group
    server_url: "{{zabbix_server_url}}"
    login_user: Admin
    login_password: "{{lookup(passdb, zabbix_server_admin_passwd)}}"
    state: present
    host_groups: "{{zabbix_default_hostgroups}}"

- name: import default zabbix json templates
  become: no
  local_action:
    module: zabbix_template
    login_user: Admin
    login_password: "{{lookup(passdb, zabbix_server_admin_passwd)}}"
    server_url: "{{zabbix_server_url}}"
    template_json: "{{ lookup('file', _template.value.src) }}"
    template_groups: "{{ _template.value.groups }}"
    state: "{{ _template.value.state|default('present') }}"
  with_dict: "{{zabbix_default_templates}}"
  loop_control:
    loop_var: _template
  when: _template.value.type == "json"
